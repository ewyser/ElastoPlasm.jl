"""
    setPaths(newDir::String, path::String) -> Dict{Symbol, String}

Creates and manages directories within a specified base path, allowing users to define and generate subdirectories interactively. The function returns a dictionary that maps the names of the created subdirectories to their absolute paths.

# Arguments
- `newDir::String`: The name of the main directory to be created within the base path. This directory will serve as the parent directory for any additional subdirectories generated by the function.
- `path::String`: The base directory in which the `newDir` will be created. This should be an existing directory where the new structure will be added.

# Returns
- `Dict{Symbol, String}`: A dictionary where each key is a symbol representing the name of a created subdirectory (e.g., `:plot`, `:dat`, `:geo`), and each value is the absolute path to that subdirectory.

# Description
The `setPaths` function is designed to help users organize their project directories by creating a structured set of subdirectories within a specified base path. The function first ensures that the specified main directory (`newDir`) exists within the provided base path (`path`). If `newDir` does not exist, it is created.

The user is then prompted to select which subdirectories to generate within this main directory. These options typically include folders like `plot`, `dat`, and `geo`, but can be customized. After the user makes their selection, the function creates the selected subdirectories if they do not already exist and returns a dictionary that maps the directory names to their absolute paths.

The function also handles the deletion of specific file types (e.g., `.csv` files) within the newly created subdirectories if they already existed, ensuring that the directory structure is clean and ready for new content.

# Example
```julia
julia> setPaths("test", pwd())
select folder(s) you'd like to generate:
[press: Enter=toggle, a=all, n=none, d=done, q=abort]
[X] plot
[ ] dat
> [X] geo
┌ Info: additional paths generated:
│     /Users/manuwyser/Dropbox/Jobs/git/cORIUm/test/geo
└     /Users/manuwyser/Dropbox/Jobs/git/cORIUm/test/plot
Dict{Symbol, String} with 2 entries:
:geo  => "/Users/manuwyser/Dropbox/Jobs/git/cORIUm/test/geo"
:plot => "/Users/manuwyser/Dropbox/Jobs/git/cORIUm/test/plot"

````
"""
function setPaths(newDir::String,path::String)
    # creating or doing nothin for dir newDir
    if !isdir(joinpath(path,newDir))
        mkdir(joinpath(path,newDir))
    end
    # select subfolder(s) to be created
    options   = ["plot","dat","geo"]
    select    = request("select folder(s) you'd like to generate:",MultiSelectMenu(options))
    paths     = Dict{Symbol,Any}()
    msg,msg!  = ["additional paths generated:"],["deleting at:"]
    for (k,name) ∈ enumerate(select)
        paths[Symbol(options[name])] = joinpath(joinpath(path,newDir),options[name])
        # creating or doing nothin
        if !isdir(joinpath(joinpath(path,newDir),options[name]))
            mkdir(joinpath(joinpath(path,newDir),options[name]))
            push!(msg,"\n\t"*joinpath(joinpath(path,newDir),options[name]))
        else
            try
                foreach(rm, filter(endswith(".csv"), readdir(paths[Symbol(options[name])],join=true)))
                push!(msg!,"\n\t"*paths[Symbol(options[name])])
            catch err
            end
        end
    end 
    if length(msg)>1
        @info join(msg)
    end
    if length(msg!)>1
        @warn join(msg!)
    end
    return paths
end
export setPaths