var documenterSearchIndex = {"docs":
[{"location":"deformation/#Deformation-\\-and-Strain","page":"-","title":"Deformation \\& Strain","text":"","category":"section"},{"location":"deformation/","page":"-","title":"-","text":"The theoretical background and general notions related either to Continuum Mechanics, Infinitesimal and Finite Deformation Mechanics or Elasticity and Elasto-plasticity theories presented in this chapter can be found in the following classical text book references: \\cite{Bower2009,Hashiguchi2012,Spencer2012,Borja2013,Doghri2013}. The purpose is to avoid too many references within the text body and to improve the reading. \\section{Motions and deformations} \\subsection{Description of motion} Let us consider a material point in a continuum body defined by its coordinates boldsymbolX in a reference configuration Omega_0 subset mathbbR^3 at a reference time t_0=0. For a given later time t0 the material point coordinate boldsymbolX has now coordinates boldsymbolx in the current configuration Omega_t subset mathbbR^3, then the equation \\begin{align} \t\\boldsymbol{x}=\\boldsymbol{\\phi}(\\boldsymbol{X},t), \\quad \\text{\\eg} \\quad xi = \\phii(XI,t), \\end{align} describes a \\textit{motion} of the continuum where boldsymbolphi is a transformation (\\eg a mapping) from the reference configuration to the current configuration.  \\begin{figure}[htbp] \t\\centering \t\\includegraphics[scale=0.6]{figs/motiondescription} \t\\caption{Coordinate boldsymbolX of a material point in the reference configuration Omega_0 and its updated coordinate boldsymbolx=boldsymbolphi(boldsymbolXt) in the current configuration, in a fixed Cartesian orthonormal frame (mathcalOboldsymbole_1boldsymbole_2boldsymbole_3).} \t\\label{motion} \\end{figure}","category":"page"},{"location":"deformation/","page":"-","title":"-","text":"Any given material point is specified by its position vectors, \\eg  \\begin{align} \t\\boldsymbol{X} &= {XI}, \\quad &\\text{in the \\textit{reference} configuration} \\  \t\\boldsymbol{x} &= {xi}, \\quad  &\\text{in the \\textit{current} configuration}  \\end{align}  and upper cases (\\eg IJK) and lower cases (\\eg ijk) indices designate the coordinates in the reference and current configurations, respectively. By convention, X_I are called \\textit{the material coordinates} whereas x_i are called \\textit{the spatial coordinates}\\footnote{Similarly, the material coordinates can be referred to as \\textit{Lagrangian coordinates} and, the spatial coordinates can be referred to as \\textit{Eulerian coordinates}}.","category":"page"},{"location":"deformation/","page":"-","title":"-","text":"During a rigid-body motion made of both translation and rotation, a body moves without changing its shape; the distance and the orientation between two material points do not change during the motion. A \\textit{translation} is a rigid-body motion during which every material point undergoes the same displacement. Such motion is described by the following equation \\begin{align} \t\\boldsymbol{x}=\\boldsymbol{X}+\\boldsymbol{c}(t), \\end{align} where the vector boldsymbolc(t) is frame invariant and only depends on t. A \\textit{rotation} is also a rigid-body motion during which every material point undergoes the same rotation about any arbitrary axis of origin mathcalO. It is described by the following equation \\begin{align} \t\\boldsymbol{x}=\\boldsymbol{Q}(t) \\boldsymbol{X}, \t\\label{rigidbodymotion_eq} \\end{align} where boldsymbolQ(t) is an orthogonal tensor. ","category":"page"},{"location":"deformation/","page":"-","title":"-","text":"As such, any rigid-body motion is a combination of both a translational part and a rotation part about an axis and, it can be described by equations of the form  \\begin{align} \t\\boldsymbol{x}&=\\boldsymbol{Q}(t) \\boldsymbol{X} + \\boldsymbol{c}(t), \\quad \\text{or} \\quad \\boldsymbol{X}=\\boldsymbol{Q}^T(t) \\boldsymbol{x} - \\boldsymbol{Q}^T(t) \\boldsymbol{c}(t). \\end{align} ","category":"page"},{"location":"deformation/","page":"-","title":"-","text":"\\subsection{Deformation} A body will change its shape as well as its position (translation) and its orientation (rotation) during any motion. A motion during which a change in shape takes place is called a deformation, independently of a change of position or orientation. ","category":"page"},{"location":"deformation/","page":"-","title":"-","text":"As such, the main problem in deformation analysis is to separate rigid-body motion from deformation, which has to be \\textit{invariant} with respect to rigid-body motion.","category":"page"},{"location":"deformation/","page":"-","title":"-","text":"The \\textit{deformation gradient} is defined by: \\begin{align} \t\\boldsymbol{F} \\equiv \\dfrac{\\partial \\boldsymbol{\\phi}}{\\partial \\boldsymbol{X}} = \\dfrac{\\partial \\boldsymbol{x}}{\\partial \\boldsymbol{X}}, \\quad \\text{\\eg} \\quad F{iJ}=\\dfrac{\\partial xi}{\\partial XJ}, \\end{align} and describes how much the current coordinate xi$ varies w.r.t to the reference coordinate X_J. Taking the inverse of the deformation gradient, \\eg boldsymbolF^-1 gives the inverse relation between the reference coordinate w.r.t the current configuration. If there is no motion, then x_i=X_I and so F_iI reduces to delta_iI, \\eg F_iI=delta_iI. ","category":"page"},{"location":"deformation/","page":"-","title":"-","text":"Alternatively, the current position is defined by boldsymbolx=boldsymbolX+boldsymbolu, where boldsymbolu is the displacement. By definition, the deformation gradient is also given by \\begin{align} \t\\begin{aligned} \t\t\\boldsymbol{F} &= \\dfrac{\\partial}{\\partial \\boldsymbol{X}}(\\boldsymbol{X}+\\boldsymbol{u}),\\\n\t\t\\boldsymbol{F} &= \\dfrac{\\partial \\boldsymbol{X}}{\\partial \\boldsymbol{X}}+\\dfrac{\\partial \\boldsymbol{u}}{\\partial \\boldsymbol{X}},\\\n\t\t\\boldsymbol{F} &= \\boldsymbol{I}+\\dfrac{\\partial \\boldsymbol{u}}{\\partial \\boldsymbol{X}} \\label{dFdef}, \t\\end{aligned} \\end{align} and rearranging terms, the \\textit{displacement} gradient tensor is given by \\begin{align} \t\\dfrac{\\partial \\boldsymbol{u}}{\\partial \\boldsymbol{X}} = \\boldsymbol{F}-\\boldsymbol{I},  \\quad \\text{\\eg} \\quad \\dfrac{\\partial ui}{\\partial XJ}=\\dfrac{\\partial xi}{\\partial XJ}-\\delta{iJ}. \\end{align}","category":"page"},{"location":"deformation/","page":"-","title":"-","text":"However, the displacement gradient is expressed w.r.t the reference configuration. Differentiating the displacement w.r.t to the current configuration yields \\begin{align} \t\\dfrac{\\partial \\boldsymbol{u}}{\\partial \\boldsymbol{x}} = \\boldsymbol{I} - \\boldsymbol{F}^{-1},  \\quad \\text{\\eg} \\quad \\dfrac{\\partial ui}{\\partial xj}=\\delta{iJ}-\\dfrac{\\partial XI}{\\partial x_j}. \\end{align}","category":"page"},{"location":"deformation/","page":"-","title":"-","text":"Let consider an infinitesimal line element vector dboldsymbolX with origin boldsymbolX in the reference configuration and an infinitesimal line element vector dboldsymbolx with origin boldsymbolx in the current configuration (see Fig. \\ref{deformationdescription}). By definition, one has \\begin{align} \td\\boldsymbol{x} = \\boldsymbol{F} d\\boldsymbol{X} \\quad \\text{\\eg} \\quad dxi = F{iJ} dXJ, \\end{align}   and demonstrates that the deformation gradient is the fundamental measure of deformation in continuum mechanics. ","category":"page"},{"location":"deformation/","page":"-","title":"-","text":"\\begin{figure}[htbp] \t\\centering \t\\includegraphics[scale=0.6]{figs/deformationdescription} \t\\caption{Deformation of an infinitesimal line element dboldsymbolX in a reference configuration.} \t\\label{deformationdescription} \\end{figure}","category":"page"},{"location":"deformation/","page":"-","title":"-","text":"\\subsection{Finite deformation and strain measure} A \\textit{measure} of the deformation (\\eg the \\textit{strain}) should be \\textit{invariant by rotation}. The deformation gradient tensor boldsymbolF does not have to satisfy this property. In fact, in the rigid-body motion given by Eq. \\ref{rigidbodymotion_eq}, the deformation gradient reduces to boldsymbolF=boldsymbolQ(t). As such, boldsymbolF itself is not a suitable measure of the deformation under a rigid-body motion and, it does not allow a proper invariant definition of the strain measure. ","category":"page"},{"location":"deformation/","page":"-","title":"-","text":"What is then a suitable measure of deformation ? The answer lies in the definition of additional deformation tensors which are briefly presented in the following.","category":"page"},{"location":"deformation/","page":"-","title":"-","text":"Using the polar decomposition theorem, the deformation gradient can be decomposed, in a multiplicative manner, by a product of two second-order tensors. It follows that  \\begin{align} \t\\boldsymbol{F}=\\boldsymbol{R} \\boldsymbol{U} = \\boldsymbol{V} \\boldsymbol{R} \\quad \\text{\\eg} \\quad F{iJ} = R{iK}U{KJ} = V{ik}R_{kJ}, \\end{align}   where boldsymbolR is a proper orthogonal tensor (\\eg a rotation tensor), and boldsymbolU and boldsymbolV are the right stretch (\\eg defined w.r.t. the reference configuration in the \\textit{material} coordinates) and left stretch (\\eg defined w.r.t the current configuration in the \\textit{spatial} coordinates) tensors, respectively. The polar decomposition \\textit{multiplicatively} decomposes the deformation gradient into orthogonal (\\eg rotation) and stretch tensors.","category":"page"},{"location":"deformation/","page":"-","title":"-","text":"The right Cauchy-Green deformation tensor boldsymbolC is a first suitable measure of deformation and is given by  \\begin{align} \t\\boldsymbol{C} = \\boldsymbol{F}^T \\boldsymbol{F}= \\boldsymbol{U}^T \\boldsymbol{R}^T \\boldsymbol{R} \\boldsymbol{U} = \\boldsymbol{U}^2 \\quad \\text{\\eg} \\quad C{IJ}=\\dfrac{\\partial xk}{\\partial XI} \\dfrac{\\partial xk}{\\partial X_J}. \\end{align} and, since boldsymbolR is orthogonal, hence boldsymbolRboldsymbolR^T=boldsymbolR^TboldsymbolR=boldsymbolI, which demonstrates the invariance by rotation of boldsymbolC.","category":"page"},{"location":"deformation/","page":"-","title":"-","text":"Similarly, the left Cauchy-Green deformation tensor boldsymbolb is a second suitable measure of deformation and is given by  \\begin{align} \t\\boldsymbol{b} = \\boldsymbol{F}  \\boldsymbol{F}^T = \\boldsymbol{V} \\boldsymbol{R} \\boldsymbol{R}^T \\boldsymbol{V}^T = \\boldsymbol{V}^2 \\quad \\text{\\eg} \\quad b{ij}=\\dfrac{\\partial xi}{\\partial XK} \\dfrac{\\partial xj}{\\partial X_K}. \\end{align}","category":"page"},{"location":"deformation/","page":"-","title":"-","text":"These two tensors allow to define the \\textit{Lagrangian strain} tensor boldsymbolgamma (\\eg the strain is defined w.r.t the reference configuration) and the \\textit{Eulerian strain} tensor boldsymboleta (\\eg the strain is defined w.r.t the current configuration), respectively, and are defined as \\begin{align} \t\\boldsymbol{\\gamma}&=\\dfrac{1}{2}(\\boldsymbol{C}-\\boldsymbol{I}),\\\n\t\\boldsymbol{\\eta}&=\\dfrac{1}{2}(\\boldsymbol{I}-\\boldsymbol{b}^{-1}). \\end{align}","category":"page"},{"location":"deformation/","page":"-","title":"-","text":"The expressions of both boldsymbolgamma and  boldsymboleta can be expressed in terms of the displacement gradient, which results in the following \\begin{align} \t\\gamma{IJ}&=\\dfrac{1}{2}\\left( \\dfrac{\\partial uI}{\\partial XJ}+\\dfrac{\\partial uJ}{\\partial XI}+\\dfrac{\\partial uk}{\\partial XI}\\dfrac{\\partial uk}{\\partial XJ} \\right), \\label{lagrangiantensor}\\\n\t\\eta{ij}&=\\dfrac{1}{2}\\left( \\dfrac{\\partial ui}{\\partial xj}+\\dfrac{\\partial uj}{\\partial xi}-\\dfrac{\\partial uK}{\\partial xi}\\dfrac{\\partial uK}{\\partial xj} \\right). \t\\label{euleriantensor} \\end{align}","category":"page"},{"location":"deformation/","page":"-","title":"-","text":"\\subsection{Infinitesimal strain} The fundamental assumption of the infinitesimal strain theory is that the current configuration is not significantly different from the reference configuration. This implies that all the components of the displacement gradient are numerically small, \\eg  partial u_i  partial X_J   ll 1 and, ii) the squares and products of these quantities are neglected. ","category":"page"},{"location":"deformation/","page":"-","title":"-","text":"To demonstrate the equivalence \\citep{Spencer2012} , let consider the displacement gradient expressed in the spatial coordinates, \\eg \\begin{align} \t\\dfrac{\\partial \\boldsymbol{u}}{\\partial\\boldsymbol{x}}=\\boldsymbol{I}-\\boldsymbol{F}^{-1} \\quad \\text{\\eg} \\quad \\dfrac{\\partial ui}{\\partial xj} = \\delta{ij} - \\dfrac{\\partial XI}{\\partial xj},  \\end{align} where, by binomial expansion, boldsymbolI-boldsymbolF^-1 yields to \\begin{align} \t\\boldsymbol{I}-\\boldsymbol{F}^{-1} = \\boldsymbol{I} - \\left( \\boldsymbol{I}-(\\boldsymbol{F}-\\boldsymbol{I}) + (\\boldsymbol{F}-\\boldsymbol{I})^2 -(\\boldsymbol{F}-\\boldsymbol{I})^3+...\\right). \\end{align} The displacement gradient now reads  \\begin{align} \t\\dfrac{\\partial \\boldsymbol{u}}{\\partial\\boldsymbol{x}}= (\\boldsymbol{F}-\\boldsymbol{I}) - (\\boldsymbol{F}-\\boldsymbol{I})^2 + (\\boldsymbol{F}-\\boldsymbol{I})^3-...,  \\end{align} and, considering boldsymbolF-boldsymbolI = partial boldsymbolupartial boldsymbolX and neglecting higher order terms, the displacement gradient formulated in the material coordinates reduces to \\begin{align} \t\\dfrac{\\partial \\boldsymbol{u}}{\\partial\\boldsymbol{x}} = \\dfrac{\\partial \\boldsymbol{u}}{\\partial\\boldsymbol{X}} \\quad \\text{\\eg} \\quad \\dfrac{\\partial ui}{\\partial xj} = \\dfrac{\\partial ui}{\\partial X_J}. \\end{align}","category":"page"},{"location":"deformation/","page":"-","title":"-","text":"To first order in the displacement gradient, it follows from Eqs. \\ref{lagrangiantensor}-\\ref{euleriantensor} that gamma_IJ simeq eta_ij. The \\textit{infinitesimal strain} tensor boldsymbolepsilon is defined as  \\begin{align} \t\\boldsymbol{\\epsilon} = \\dfrac{1}{2} \\left( \\boldsymbol{F} + \\boldsymbol{F}^T \\right)- \\boldsymbol{I} \\quad \\text{\\eg} \\quad \\epsilon{ij}=\\dfrac{1}{2} \\left(\\dfrac{\\partial ui}{\\partial XJ}+ \\dfrac{\\partial uj}{\\partial XI} \\right). \\label{infinitesiamlstrain_df} \\end{align} Hence, the infinitesimal strain tensor can be regarded as an exact but first order formulation of the displacement gradient tensor. ","category":"page"},{"location":"getting_started/#Getting-started","page":"-","title":"Getting started","text":"","category":"section"},{"location":"getting_started/#How-to-plasmazing-?","page":"-","title":"How to plasmazing ?","text":"","category":"section"},{"location":"getting_started/","page":"-","title":"-","text":"(opt.) Get Julia here and follow instructions for installation\ncd to the local repo ./elastoPlasm \nLaunch Julia (on macOS, drag & drop start_macOS.sh in the terminal)","category":"page"},{"location":"getting_started/","page":"-","title":"-","text":"manuwyser@mBp elastoPlasm.jl % julia --project=. --threads=1\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.6.5 (2021-12-19)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |","category":"page"},{"location":"getting_started/","page":"-","title":"-","text":"Enter pkg mode ], then activate . the project elastoPlasm and instantiate its environment and related packages. You can st to check package status.","category":"page"},{"location":"getting_started/","page":"-","title":"-","text":"(elastoPlasm) pkg> st\nProject elastoPlasm v0.3.5\nStatus `~/Dropbox/Jobs/git/elastoPlasm.jl/Project.toml`\n  [6e4b80f9] BenchmarkTools v1.5.0\n⌃ [052768ef] CUDA v5.4.3\n  [f67ccb44] HDF5 v0.17.2\n⌃ [63c18a36] KernelAbstractions v0.9.22\n  [b964fa9f] LaTeXStrings v1.3.1\n⌃ [91a5bcdd] Plots v1.40.5\n  [92933f4c] ProgressMeter v1.10.2\n  [295af30f] Revise v3.6.0\n  [37e2e46d] LinearAlgebra\n  [44cfe95a] Pkg v1.9.2\n  [3fa0cd96] REPL\n  [9a3f8284] Random\n  [2f01184e] SparseArrays\nInfo Packages marked with ⌃ have new versions available and may be upgradable.\n\n(elastoPlasm) pkg> \n","category":"page"},{"location":"getting_started/","page":"-","title":"-","text":"Once elastoPlasm has been correctly instantiated, you can using elastoPlasm","category":"page"},{"location":"getting_started/","page":"-","title":"-","text":"julia> using elastoPlasm\n[ Info: Precompiling elastoPlasm [ff84b311-7f94-4593-ba3b-b1d6d2226836]\n┌ Info: elastoPlasm: sucessful superInclude()\n│ \t✓ init/scripts\n│ \t✓ init/misc\n│ \t✓ init/fun\n└ \t✓ init/api\n\njulia> names(elastoPlasm)\n6-element Vector{Symbol}:\n :allocCheck\n :config_plot\n :e2eTest\n :elastoPlasm\n :slump\n :ϵp23De!\n\njulia> \njulia> ","category":"page"},{"location":"getting_started/","page":"-","title":"-","text":"Input parameters: L is a vector of the Eulerian mesh dimensions ell_xzxyz[1], the argument nel defines the elements along the x dim., varPlot defines state variable to be displayed in plot (\"P\" for pressure, \"du\" for displacement or \"epII\" for plastic strain), and cmType defines the constitutive model being used. \nOptional kwargs are: shpfun={:smpm,:gimpm,:bsmpm} defining shape functions, fwrk={:infinitesimal,:finite} defining the deformation framework, trsf={:picflipUSL,:mUSL,:tpicUSL} defining the mapping scheme, vollock={true|false} is a boolean controlling volumetric locking corrections using the DeltabarF method (see [1,2]), and GRF={true|false} is a boolean switching on/off gaussian random cohesion fields (see [3,4]). An illustrative example with kwargs is given below","category":"page"},{"location":"getting_started/","page":"-","title":"-","text":"ϵp23De([64.1584,12.80],40,\"P\",\"MC\";shpfun=:bsmpm,fwrk=:finite,trsf=:mUSL,vollock=true)","category":"page"},{"location":"getting_started/","page":"-","title":"-","text":"Outputs (figs, gif, etc.) are saved in the folder ./docs/out/\n(final note): ϵp23De automatically infers whether the two- or three-dimensional solver should be compiled, solely based on the dimension of L, i.e., length(L)={2|3}.","category":"page"},{"location":"getting_started/","page":"-","title":"-","text":"[1]: Two- and three-dimensional geometries are now supported since v0.3.0.","category":"page"},{"location":"function/api/#ElastoPlasm-Reference","page":"Public API","title":"ElastoPlasm Reference","text":"","category":"section"},{"location":"function/api/","page":"Public API","title":"Public API","text":"CollapsedDocStrings = true","category":"page"},{"location":"function/api/","page":"Public API","title":"Public API","text":"Modules = [ElastoPlasm]\nPages   = [\"kwargser.jl\", \"require.jl\", \"settingup.jl\"]","category":"page"},{"location":"function/api/#ElastoPlasm.kwargser-Tuple{Symbol, Any}","page":"Public API","title":"ElastoPlasm.kwargser","text":"kwargser(type::Symbol, kwargs::Any; dim::Number=2) -> Dict\n\nGenerates a configuration dictionary for simulation or API routines by merging user-supplied keyword arguments with default reference values.\n\nArguments\n\ntype::Symbol: The configuration type (e.g., :instr) to load defaults for.\nkwargs::Any: Dictionary of user-supplied keyword arguments to override defaults.\ndim::Number=2: (Optional) Spatial dimension, used for kernel initialization.\n\nReturns\n\nDict: A dictionary containing the merged configuration, with kernels and precision set for :instr type.\n\nBehavior\n\nFor type == :instr, merges kwargs with required defaults, sets precision, and attaches kernel functions.\nFor other types, merges kwargs with defaults and returns the result.\nWarns about any unused keyword arguments.\n\nExample\n\ncfg = kwargser(:instr, Dict(:dtype => 64, :locking => true); dim=3)\n\n\n\n\n\n","category":"method"},{"location":"function/api/#ElastoPlasm.require","page":"Public API","title":"ElastoPlasm.require","text":"require(in::Symbol=:instr) -> Dict\n\nReturns a reference configuration dictionary for simulation instructions or API routines.\n\nArguments\n\nin::Symbol: The configuration type to load defaults for. Only :instr is supported.\n\nReturns\n\nDict: A dictionary containing default configuration values for simulation, including precision, basis, deformation framework, mapping scheme, locking mitigation, random field generator, plasticity, non-local regularization, plotting options, and performance mode.\n\nBehavior\n\nIf in == :instr, returns a dictionary with all default simulation options.\nThrows an error for unsupported symbols.\n\nExample\n\ncfg = require(:instr)\n\nSupported keys and their purpose\n\n:dtype   — Arithmetic precision\n:basis   — Shape function type\n:fwrk    — Deformation framework\n:trsfr   — Mapping scheme\n:vollock — Volumetric locking mitigation\n:grf     — Gaussian Random Field generator\n:plast   — Plasticity onset and flow law\n:nonloc  — Non-local regularization\n:plot    — Plotting options\n:perf    — Performance mode\n\n\n\n\n\n","category":"function"},{"location":"function/api/#ElastoPlasm.config_plot","page":"Public API","title":"ElastoPlasm.config_plot","text":"config_plot(titf=12, gf=12, tickf=10, lf=10, lw=2, fs=:box, l=nothing, g=false)\n\nConfigures the default styling parameters for plots, allowing customization of fonts, line widths, frame style, labels, and grid visibility.\n\nArguments\n\ntitf: Font size for the plot title (default: 12).\ngf: Font size for guide elements, such as axis labels and legends (default: 12).\ntickf: Font size for tick labels (default: 10).\nlf: Font size for legend text (default: 10).\nlw: Line width for plot lines (default: 2).\nfs: Frame style for the plot, e.g., :box or :none (default: :box).\nl: Label for the plot, or nothing for no label (default: nothing).\ng: Grid display option; true to show grid, false to hide (default: false).\n\nReturns\n\nnothing\n\nExample\n\nconfig_plot(titf=14, gf=12, tickf=8, lf=12, lw=3, fs=:box, l=\"My Plot\", g=true)\n\n\n\n\n\n","category":"function"},{"location":"function/api/#ElastoPlasm.set_paths-Tuple{String, String}","page":"Public API","title":"ElastoPlasm.set_paths","text":"set_paths(new_dir::String, path::String; interactive::Bool=true) -> Dict{Symbol, String}\n\nCreates and manages subdirectories within a specified base path, optionally allowing interactive selection of which folders to generate.\n\nArguments\n\nnew_dir::String: Name of the main directory to create within the base path.\npath::String: The base directory in which new_dir will be created.\ninteractive::Bool=true: If true, prompts the user to select which subdirectories to create; if false, creates all default subdirectories automatically.\n\nReturns\n\nDict{Symbol, String}: Dictionary mapping subdirectory names (as symbols) to their absolute paths.\n\nBehavior\n\nEnsures the main directory exists within the base path.\nInteractively or automatically creates subdirectories (e.g., plot, dat).\nCleans up specific file types in newly created subdirectories if they already existed.\nLogs information about generated and cleaned paths.\n\nExample\n\npaths = set_paths(\"results\", pwd(); interactive=false)\nprintln(paths[:plot])  # Absolute path to the plot subdirectory\n\n\n\n\n\n","category":"method"},{"location":"function/script/#ElastoPlasm-Reference","page":"Example","title":"ElastoPlasm Reference","text":"","category":"section"},{"location":"function/script/","page":"Example","title":"Example","text":"CollapsedDocStrings = true","category":"page"},{"location":"function/script/","page":"Example","title":"Example","text":"Modules = [ElastoPlasm]\nPages   = [\"collapse.jl\", \"slump.jl\", \"allocTest.jl\", \"cmpTest.jl\", \"e2eTest.jl\", \"shpTest.jl\"]","category":"page"},{"location":"function/script/#ElastoPlasm.collapse-Tuple{NamedTuple, NamedTuple}","page":"Example","title":"ElastoPlasm.collapse","text":"collapse(ic::NamedTuple, cfg::NamedTuple) -> Bool\n\nRuns the explicit solution workflow for the collapse problem, including simulation and postprocessing.\n\nArguments\n\nic::NamedTuple: Initial mesh/material/compression/time/gravity configuration.\ncfg::NamedTuple: Simulation instructions and output paths.\n\nReturns\n\nBool: Returns true if the simulation and postprocessing complete successfully.\n\n\n\n\n\n","category":"method"},{"location":"function/script/#ElastoPlasm.ic_collapse-Tuple{Vector{Int64}, Vararg{Any, 4}}","page":"Example","title":"ElastoPlasm.ic_collapse","text":"ic_collapse(dim::Int, nel::Vector{Int64}, ν, E, ρ0, l0; fid::String=..., kwargs...) -> NamedTuple, NamedTuple\n\nInitializes the mesh, material points, constitutive model, and simulation configuration for a collapse test.\n\nArguments\n\ndim::Int: Number of spatial dimensions (2 or 3).\nnel::Vector{Int64}: Number of elements in each dimension.\nν, E, ρ0, l0: Physical parameters.\nfid::String: (Optional) File or run identifier.\nkwargs...: Additional keyword arguments for simulation configuration.\n\nReturns\n\n(ic, cfg): Two named tuples containing mesh/material/compression info (ic) and instructions/paths (cfg).\n\n\n\n\n\n","category":"method"},{"location":"function/script/#ElastoPlasm.ic_slump-Tuple{Vector{Float64}, Vector{Int64}}","page":"Example","title":"ElastoPlasm.ic_slump","text":"ic_slump(L::Vector{Float64}, nel::Vector{Int64}; fid::String=..., kwargs...) -> NamedTuple, NamedTuple\n\nInitializes the mesh, material points, and simulation configuration for a slump test.\n\nArguments\n\nL::Vector{Float64}: Domain dimensions.\nnel::Vector{Int64}: Number of elements in each dimension.\nfid::String: (Optional) File or run identifier.\nkwargs...: Additional keyword arguments for simulation configuration.\n\nReturns\n\n(ic, cfg): Two named tuples containing mesh/material point/compression info (ic) and instructions/paths (cfg).\n\nExample\n\nic, cfg = ic_slump([64.0, 16.0], [40, 10]; fid=\"run1\")\n\n\n\n\n\n","category":"method"},{"location":"function/script/#ElastoPlasm.slump-Tuple{NamedTuple, NamedTuple}","page":"Example","title":"ElastoPlasm.slump","text":"slump(ic::NamedTuple, cfg::NamedTuple; mutate::Bool=false) -> Bool\n\nRuns the explicit solution workflow for the slump problem, including simulation and postprocessing.\n\nArguments\n\nic::NamedTuple: Initial mesh, material point, compression, and time configuration.\ncfg::NamedTuple: Simulation instructions and output paths.\n\nReturns\n\nBool: Returns true if the simulation and postprocessing complete successfully.\n\nExample\n\nsuccess = slump(ic, cfg)\n\n\n\n\n\n","category":"method"},{"location":"function/program/#ElastoPlasm-Reference","page":"Internals","title":"ElastoPlasm Reference","text":"","category":"section"},{"location":"function/program/","page":"Internals","title":"Internals","text":"CollapsedDocStrings = true","category":"page"},{"location":"function/program/","page":"Internals","title":"Internals","text":"Modules = [ElastoPlasm]\nPages   = [\"physics.jl\", \"plot.jl\", \"savlot.jl\", \"utilities.jl\", \"cm.jl\", \"mesh.jl\", \"mps.jl\", \"e2e.jl\", \"e2n.jl\", \"geom.jl\", \"getbc.jl\", \"GRF.jl\", \"inicollapse.jl\", \"inislump.jl\", \"plasming.jl\", \"elastoplast.jl\", \"elast.jl\", \"nonlocal.jl\", \"plast.jl\", \"DP.jl\", \"J2.jl\", \"MCRetMap.jl\", \"deform.jl\", \"domain.jl\", \"update.jl\", \"volumetric.jl\", \"augm.jl\", \"mapsto.jl\", \"n2p.jl\", \"p2n.jl\", \"solve.jl\", \"shpfun.jl\", \"tplgy.jl\", \"bsmpm.jl\", \"delta.jl\", \"gimpm.jl\", \"smpm.jl\"]","category":"page"},{"location":"function/program/#ElastoPlasm.get_dt-NTuple{5, Any}","page":"Internals","title":"ElastoPlasm.get_dt","text":"get_dt(mp, mesh, yd, t, time) -> Float64\n\nComputes the adaptive time step for the simulation based on mesh spacing and material point velocities.\n\nArguments\n\nmp: Material point data structure, must contain vmax.\nmesh: Mesh data structure, must contain h.\nyd: Small offset added to velocity for stability.\nt: Current simulation time.\ntime: Total simulation time.\n\nReturns\n\nFloat64: The computed time step, limited by remaining simulation time.\n\nExample\n\ndt = get_dt(mp, mesh, 1e-6, t, time)\n\n\n\n\n\n","category":"method"},{"location":"function/program/#ElastoPlasm.get_g-Tuple{Float64, Float64, Int64}","page":"Internals","title":"ElastoPlasm.get_g","text":"get_g(t::Float64, tg::Float64, ndim::Int64) -> Vector{Float64}\n\nCalculates the gravity vector for the current time, ramping up to full gravity over duration tg.\n\nArguments\n\nt::Float64: Current simulation time.\ntg::Float64: Gravity ramp duration.\nndim::Int64: Number of spatial dimensions.\n\nReturns\n\nVector{Float64}: Gravity vector for the current time and dimension.\n\nExample\n\ng = get_g(t, tg, 2)\n\n\n\n\n\n","category":"method"},{"location":"function/program/#ElastoPlasm.get_spacetime-NTuple{6, Any}","page":"Internals","title":"ElastoPlasm.get_spacetime","text":"get_spacetime(mp, mesh, cmpr, instr, t, tg, te, time) -> Tuple{Vector{Float64}, Float64}\n\nUpdates simulation state, including plasticity status, adaptive time step, and gravity vector.\n\nArguments\n\nmp: Material point data structure.\nmesh: Mesh data structure.\ncmpr: Compression or constitutive model data.\ninstr: Instruction/configuration dictionary.\nt: Current simulation time.\ntg: Gravity ramp duration.\nte: End time for gravity ramp.\ntime: Total simulation time.\n\nReturns\n\n(g, dt): Tuple containing the gravity vector and computed time step.\n\nExample\n\ng, dt = get_spacetime(mp, mesh, cmpr, instr, t, tg, te, time)\n\n\n\n\n\n","category":"method"},{"location":"function/program/#ElastoPlasm.plasming!-NTuple{5, Any}","page":"Internals","title":"ElastoPlasm.plasming!","text":"plasming!(mp, mesh, cmpr, time, instr) -> Any\n\nRuns the explicit time-stepping workflow for ElastoPlasm, updating material points and mesh state over time.\n\nArguments\n\nmp: Material point data structure.\nmesh: Mesh data structure.\ncmpr: Compression or constitutive model data.\ntime: Time data structure.\ninstr: Named tuple containing simulation instructions and plotting options.\n\nReturns\n\nThe result of the final call to savlot, typically a plot or saved state.\n\nBehavior\n\nInitializes simulation time and progress bar.\nAdvances the simulation in time steps, updating mesh and material points.\nHandles adaptive time stepping and gravity ramping.\nPlots and saves results at specified intervals.\nTracks and displays progress.\n\nExample\n\nresult = plasming!(mp, mesh, cmpr, g, 10.0, 5.0, 2.0, instr)\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ElastoPlasm","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is an evolution of the somewhat cumbersome-to-use ep2-3De v1.0, and is entirely written in Julia. It is designed for rapid prototyping while maintaining reasonable production capabilities. It addresses the following key aspects:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Updated Lagrangian explicit formulation for elastoplastic simulations.\nSupports both finite and infinitesimal deformation frameworks:\nFinite deformation: employs logarithmic strains and Kirchhoff stresses.\nInfinitesimal deformation: based on a Jaumann rate formulation.\nCompatible with multiple shape function bases:\nStandard linear shape function N_n(boldsymbolx_p)\nGIMP shape function S_n(boldsymbolx_p)\nBoundary-modified cubic B-spline shape function phi_n(boldsymbolx_p)\nProvides mappings between nodes (denoted n or v) and material points (denoted p), using:\nFLIP with augmented mUSL procedure\nTPIC with standard USL procedure","category":"page"},{"location":"","page":"Home","title":"Home","text":"The solver can generate initial fields f(boldsymbolx)—such as the cohesion c(boldsymbolx_p) or internal friction angle varphi(boldsymbolx_p)—using random Gaussian fields, with boldsymbolx_p representing a material point’s coordinate.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<p align=\"center\">   <img src=\"./assets/img/epII.png\" alt=\"Plastic strain\" style=\"width:80%;\"/>>   <br/>   <em>Figure: Slumping dynamics (without volumetric locking corrections) showing the accumulated plastic strain epsilon_p^mathrmacc after an elastic load of 8 s and an additional elasto-plastic load of ≈ 7 s.</em> </p>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<p align=\"center\">   <img src=\"./assets/img/c0.png\" alt=\"Initial cohesion field\" style=\"width:80%;\"/>   <br/>   <em>Figure: Initial cohesion field ( c0(\\boldsymbol{x}p) ) with average ( \\mu = 20 \\,\\text{kPa} ) and variance ( \\sigma = \\pm 5 \\,\\text{kPa} ).</em> </p>","category":"page"}]
}
